# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from finops_client.models.accounting_source import AccountingSource
from finops_client.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class TransactionUpdate(BaseModel):
    """
    TransactionUpdate
    """ # noqa: E501
    fq_txn_link_key: StrictStr = Field(alias="FQTxnLinkKey")
    time_modified: Optional[datetime] = Field(default=None, alias="TimeModified")
    class_ref_list_id: Optional[StrictStr] = Field(default=None, alias="ClassRefListID")
    txn_type: Optional[TransactionType] = Field(default=None, alias="TxnType")
    txn_id: Optional[StrictStr] = Field(default=None, alias="TxnID")
    txn_line_id: Optional[StrictStr] = Field(default=None, alias="TxnLineID")
    entity_ref_list_id: Optional[StrictStr] = Field(default=None, alias="EntityRefListID")
    entity_ref_full_name: Optional[StrictStr] = Field(default=None, alias="EntityRefFullName")
    account_ref_list_id: Optional[StrictStr] = Field(default=None, alias="AccountRefListID")
    account_ref_full_name: Optional[StrictStr] = Field(default=None, alias="AccountRefFullName")
    class_ref_full_name: Optional[StrictStr] = Field(default=None, alias="ClassRefFullName")
    txn_date: Optional[date] = Field(default=None, alias="TxnDate")
    ref_number: Optional[StrictStr] = Field(default=None, alias="RefNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Amount")
    currency_ref_list_id: Optional[StrictStr] = Field(default=None, alias="CurrencyRefListID")
    currency_ref_full_name: Optional[StrictStr] = Field(default=None, alias="CurrencyRefFullName")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ExchangeRate")
    amount_in_home_currency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AmountInHomeCurrency")
    memo: Optional[StrictStr] = Field(default=None, alias="Memo")
    fq_journal_entry_link_key: Optional[StrictStr] = Field(default=None, alias="FQJournalEntryLinkKey")
    fq_primary_key: Optional[StrictStr] = Field(default=None, alias="FQPrimaryKey")
    time_created: Optional[datetime] = Field(default=None, alias="TimeCreated")
    source: Optional[AccountingSource] = Field(default=None, alias="Source")
    db_created_by: Optional[StrictStr] = Field(default=None, alias="DbCreatedBy")
    db_time_created: Optional[datetime] = Field(default=None, alias="DbTimeCreated")
    db_time_modified: Optional[datetime] = Field(default=None, alias="DbTimeModified")
    __properties: ClassVar[List[str]] = ["FQTxnLinkKey", "TimeModified", "ClassRefListID", "TxnType", "TxnID", "TxnLineID", "EntityRefListID", "EntityRefFullName", "AccountRefListID", "AccountRefFullName", "ClassRefFullName", "TxnDate", "RefNumber", "Amount", "CurrencyRefListID", "CurrencyRefFullName", "ExchangeRate", "AmountInHomeCurrency", "Memo", "FQJournalEntryLinkKey", "FQPrimaryKey", "TimeCreated", "Source", "DbCreatedBy", "DbTimeCreated", "DbTimeModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if time_modified (nullable) is None
        # and model_fields_set contains the field
        if self.time_modified is None and "time_modified" in self.model_fields_set:
            _dict['TimeModified'] = None

        # set to None if class_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.class_ref_list_id is None and "class_ref_list_id" in self.model_fields_set:
            _dict['ClassRefListID'] = None

        # set to None if txn_type (nullable) is None
        # and model_fields_set contains the field
        if self.txn_type is None and "txn_type" in self.model_fields_set:
            _dict['TxnType'] = None

        # set to None if txn_id (nullable) is None
        # and model_fields_set contains the field
        if self.txn_id is None and "txn_id" in self.model_fields_set:
            _dict['TxnID'] = None

        # set to None if txn_line_id (nullable) is None
        # and model_fields_set contains the field
        if self.txn_line_id is None and "txn_line_id" in self.model_fields_set:
            _dict['TxnLineID'] = None

        # set to None if entity_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_ref_list_id is None and "entity_ref_list_id" in self.model_fields_set:
            _dict['EntityRefListID'] = None

        # set to None if entity_ref_full_name (nullable) is None
        # and model_fields_set contains the field
        if self.entity_ref_full_name is None and "entity_ref_full_name" in self.model_fields_set:
            _dict['EntityRefFullName'] = None

        # set to None if account_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_ref_list_id is None and "account_ref_list_id" in self.model_fields_set:
            _dict['AccountRefListID'] = None

        # set to None if account_ref_full_name (nullable) is None
        # and model_fields_set contains the field
        if self.account_ref_full_name is None and "account_ref_full_name" in self.model_fields_set:
            _dict['AccountRefFullName'] = None

        # set to None if class_ref_full_name (nullable) is None
        # and model_fields_set contains the field
        if self.class_ref_full_name is None and "class_ref_full_name" in self.model_fields_set:
            _dict['ClassRefFullName'] = None

        # set to None if txn_date (nullable) is None
        # and model_fields_set contains the field
        if self.txn_date is None and "txn_date" in self.model_fields_set:
            _dict['TxnDate'] = None

        # set to None if ref_number (nullable) is None
        # and model_fields_set contains the field
        if self.ref_number is None and "ref_number" in self.model_fields_set:
            _dict['RefNumber'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['Amount'] = None

        # set to None if currency_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_ref_list_id is None and "currency_ref_list_id" in self.model_fields_set:
            _dict['CurrencyRefListID'] = None

        # set to None if currency_ref_full_name (nullable) is None
        # and model_fields_set contains the field
        if self.currency_ref_full_name is None and "currency_ref_full_name" in self.model_fields_set:
            _dict['CurrencyRefFullName'] = None

        # set to None if exchange_rate (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_rate is None and "exchange_rate" in self.model_fields_set:
            _dict['ExchangeRate'] = None

        # set to None if amount_in_home_currency (nullable) is None
        # and model_fields_set contains the field
        if self.amount_in_home_currency is None and "amount_in_home_currency" in self.model_fields_set:
            _dict['AmountInHomeCurrency'] = None

        # set to None if memo (nullable) is None
        # and model_fields_set contains the field
        if self.memo is None and "memo" in self.model_fields_set:
            _dict['Memo'] = None

        # set to None if fq_journal_entry_link_key (nullable) is None
        # and model_fields_set contains the field
        if self.fq_journal_entry_link_key is None and "fq_journal_entry_link_key" in self.model_fields_set:
            _dict['FQJournalEntryLinkKey'] = None

        # set to None if fq_primary_key (nullable) is None
        # and model_fields_set contains the field
        if self.fq_primary_key is None and "fq_primary_key" in self.model_fields_set:
            _dict['FQPrimaryKey'] = None

        # set to None if time_created (nullable) is None
        # and model_fields_set contains the field
        if self.time_created is None and "time_created" in self.model_fields_set:
            _dict['TimeCreated'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['Source'] = None

        # set to None if db_created_by (nullable) is None
        # and model_fields_set contains the field
        if self.db_created_by is None and "db_created_by" in self.model_fields_set:
            _dict['DbCreatedBy'] = None

        # set to None if db_time_created (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_created is None and "db_time_created" in self.model_fields_set:
            _dict['DbTimeCreated'] = None

        # set to None if db_time_modified (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_modified is None and "db_time_modified" in self.model_fields_set:
            _dict['DbTimeModified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FQTxnLinkKey": obj.get("FQTxnLinkKey"),
            "TimeModified": obj.get("TimeModified"),
            "ClassRefListID": obj.get("ClassRefListID"),
            "TxnType": obj.get("TxnType"),
            "TxnID": obj.get("TxnID"),
            "TxnLineID": obj.get("TxnLineID"),
            "EntityRefListID": obj.get("EntityRefListID"),
            "EntityRefFullName": obj.get("EntityRefFullName"),
            "AccountRefListID": obj.get("AccountRefListID"),
            "AccountRefFullName": obj.get("AccountRefFullName"),
            "ClassRefFullName": obj.get("ClassRefFullName"),
            "TxnDate": obj.get("TxnDate"),
            "RefNumber": obj.get("RefNumber"),
            "Amount": obj.get("Amount"),
            "CurrencyRefListID": obj.get("CurrencyRefListID"),
            "CurrencyRefFullName": obj.get("CurrencyRefFullName"),
            "ExchangeRate": obj.get("ExchangeRate"),
            "AmountInHomeCurrency": obj.get("AmountInHomeCurrency"),
            "Memo": obj.get("Memo"),
            "FQJournalEntryLinkKey": obj.get("FQJournalEntryLinkKey"),
            "FQPrimaryKey": obj.get("FQPrimaryKey"),
            "TimeCreated": obj.get("TimeCreated"),
            "Source": obj.get("Source"),
            "DbCreatedBy": obj.get("DbCreatedBy"),
            "DbTimeCreated": obj.get("DbTimeCreated"),
            "DbTimeModified": obj.get("DbTimeModified")
        })
        return _obj


