# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from finops_client.models.accounting_source import AccountingSource
from typing import Optional, Set
from typing_extensions import Self

class ClassCodeBase(BaseModel):
    """
    ClassCodeBase
    """ # noqa: E501
    list_id: Optional[StrictStr] = Field(default=None, alias="ListID")
    time_modified: Optional[datetime] = Field(default=None, alias="TimeModified")
    edit_sequence: Optional[StrictInt] = Field(default=None, alias="EditSequence")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    full_name: Optional[StrictStr] = Field(default=None, alias="FullName")
    is_active: Optional[StrictBool] = Field(default=None, alias="IsActive")
    parent_ref_list_id: Optional[StrictStr] = Field(default=None, alias="ParentRefListID")
    parent_ref_full_name: Optional[StrictStr] = Field(default=None, alias="ParentRefFullName")
    sublevel: Optional[StrictInt] = Field(default=None, alias="Sublevel")
    time_created: Optional[datetime] = Field(default=None, alias="TimeCreated")
    source: Optional[AccountingSource] = Field(default=None, alias="Source")
    db_created_by: Optional[StrictStr] = Field(default=None, alias="DbCreatedBy")
    db_time_created: Optional[datetime] = Field(default=None, alias="DbTimeCreated")
    db_time_modified: Optional[datetime] = Field(default=None, alias="DbTimeModified")
    __properties: ClassVar[List[str]] = ["ListID", "TimeModified", "EditSequence", "Name", "FullName", "IsActive", "ParentRefListID", "ParentRefFullName", "Sublevel", "TimeCreated", "Source", "DbCreatedBy", "DbTimeCreated", "DbTimeModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClassCodeBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if list_id (nullable) is None
        # and model_fields_set contains the field
        if self.list_id is None and "list_id" in self.model_fields_set:
            _dict['ListID'] = None

        # set to None if time_modified (nullable) is None
        # and model_fields_set contains the field
        if self.time_modified is None and "time_modified" in self.model_fields_set:
            _dict['TimeModified'] = None

        # set to None if edit_sequence (nullable) is None
        # and model_fields_set contains the field
        if self.edit_sequence is None and "edit_sequence" in self.model_fields_set:
            _dict['EditSequence'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['FullName'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if parent_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_ref_list_id is None and "parent_ref_list_id" in self.model_fields_set:
            _dict['ParentRefListID'] = None

        # set to None if parent_ref_full_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_ref_full_name is None and "parent_ref_full_name" in self.model_fields_set:
            _dict['ParentRefFullName'] = None

        # set to None if sublevel (nullable) is None
        # and model_fields_set contains the field
        if self.sublevel is None and "sublevel" in self.model_fields_set:
            _dict['Sublevel'] = None

        # set to None if time_created (nullable) is None
        # and model_fields_set contains the field
        if self.time_created is None and "time_created" in self.model_fields_set:
            _dict['TimeCreated'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['Source'] = None

        # set to None if db_created_by (nullable) is None
        # and model_fields_set contains the field
        if self.db_created_by is None and "db_created_by" in self.model_fields_set:
            _dict['DbCreatedBy'] = None

        # set to None if db_time_created (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_created is None and "db_time_created" in self.model_fields_set:
            _dict['DbTimeCreated'] = None

        # set to None if db_time_modified (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_modified is None and "db_time_modified" in self.model_fields_set:
            _dict['DbTimeModified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClassCodeBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ListID": obj.get("ListID"),
            "TimeModified": obj.get("TimeModified"),
            "EditSequence": obj.get("EditSequence"),
            "Name": obj.get("Name"),
            "FullName": obj.get("FullName"),
            "IsActive": obj.get("IsActive"),
            "ParentRefListID": obj.get("ParentRefListID"),
            "ParentRefFullName": obj.get("ParentRefFullName"),
            "Sublevel": obj.get("Sublevel"),
            "TimeCreated": obj.get("TimeCreated"),
            "Source": obj.get("Source"),
            "DbCreatedBy": obj.get("DbCreatedBy"),
            "DbTimeCreated": obj.get("DbTimeCreated"),
            "DbTimeModified": obj.get("DbTimeModified")
        })
        return _obj


