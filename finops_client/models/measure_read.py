# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from finops_client.models.account_base import AccountBase
from finops_client.models.accounting_source import AccountingSource
from finops_client.models.class_code_base import ClassCodeBase
from finops_client.models.measure_type import MeasureType
from typing import Optional, Set
from typing_extensions import Self

class MeasureRead(BaseModel):
    """
    MeasureRead
    """ # noqa: E501
    measure_id: Optional[StrictInt] = Field(default=None, alias="MeasureID")
    account_ref_list_id: Optional[StrictStr] = Field(default=None, alias="AccountRefListID")
    class_ref_list_id: Optional[StrictStr] = Field(default=None, alias="ClassRefListID")
    period: Optional[StrictStr] = Field(default=None, alias="Period")
    measure_type: Optional[MeasureType] = Field(default=None, alias="MeasureType")
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, alias="Currency")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Amount")
    source: Optional[AccountingSource] = Field(default=None, alias="Source")
    db_created_by: Optional[StrictStr] = Field(default=None, alias="DbCreatedBy")
    db_time_created: Optional[datetime] = Field(default=None, alias="DbTimeCreated")
    db_time_modified: Optional[datetime] = Field(default=None, alias="DbTimeModified")
    account: Optional[AccountBase] = Field(default=None, alias="Account")
    class_code: Optional[ClassCodeBase] = Field(default=None, alias="ClassCode")
    __properties: ClassVar[List[str]] = ["MeasureID", "AccountRefListID", "ClassRefListID", "Period", "MeasureType", "Currency", "Amount", "Source", "DbCreatedBy", "DbTimeCreated", "DbTimeModified", "Account", "ClassCode"]

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLE', 'SLL', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VED', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWL']):
            raise ValueError("must be one of enum values ('AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLE', 'SLL', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VED', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasureRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['Account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of class_code
        if self.class_code:
            _dict['ClassCode'] = self.class_code.to_dict()
        # set to None if measure_id (nullable) is None
        # and model_fields_set contains the field
        if self.measure_id is None and "measure_id" in self.model_fields_set:
            _dict['MeasureID'] = None

        # set to None if account_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_ref_list_id is None and "account_ref_list_id" in self.model_fields_set:
            _dict['AccountRefListID'] = None

        # set to None if class_ref_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.class_ref_list_id is None and "class_ref_list_id" in self.model_fields_set:
            _dict['ClassRefListID'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['Period'] = None

        # set to None if measure_type (nullable) is None
        # and model_fields_set contains the field
        if self.measure_type is None and "measure_type" in self.model_fields_set:
            _dict['MeasureType'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['Currency'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['Amount'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['Source'] = None

        # set to None if db_created_by (nullable) is None
        # and model_fields_set contains the field
        if self.db_created_by is None and "db_created_by" in self.model_fields_set:
            _dict['DbCreatedBy'] = None

        # set to None if db_time_created (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_created is None and "db_time_created" in self.model_fields_set:
            _dict['DbTimeCreated'] = None

        # set to None if db_time_modified (nullable) is None
        # and model_fields_set contains the field
        if self.db_time_modified is None and "db_time_modified" in self.model_fields_set:
            _dict['DbTimeModified'] = None

        # set to None if account (nullable) is None
        # and model_fields_set contains the field
        if self.account is None and "account" in self.model_fields_set:
            _dict['Account'] = None

        # set to None if class_code (nullable) is None
        # and model_fields_set contains the field
        if self.class_code is None and "class_code" in self.model_fields_set:
            _dict['ClassCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasureRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MeasureID": obj.get("MeasureID"),
            "AccountRefListID": obj.get("AccountRefListID"),
            "ClassRefListID": obj.get("ClassRefListID"),
            "Period": obj.get("Period"),
            "MeasureType": obj.get("MeasureType"),
            "Currency": obj.get("Currency"),
            "Amount": obj.get("Amount"),
            "Source": obj.get("Source"),
            "DbCreatedBy": obj.get("DbCreatedBy"),
            "DbTimeCreated": obj.get("DbTimeCreated"),
            "DbTimeModified": obj.get("DbTimeModified"),
            "Account": AccountBase.from_dict(obj["Account"]) if obj.get("Account") is not None else None,
            "ClassCode": ClassCodeBase.from_dict(obj["ClassCode"]) if obj.get("ClassCode") is not None else None
        })
        return _obj


