# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import StrictInt, StrictStr
from typing import List, Optional
from finops_client.models.accounting_source import AccountingSource
from finops_client.models.period_amount import PeriodAmount
from finops_client.models.type_of_account import TypeOfAccount

from finops_client.api_client import ApiClient, RequestSerialized
from finops_client.api_response import ApiResponse
from finops_client.rest import RESTResponseType


class ReportsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get(
        self,
        period_str: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        class_full_name: Optional[StrictStr] = None,
        account_full_name: Optional[StrictStr] = None,
        account_type: Optional[List[TypeOfAccount]] = None,
        source: Optional[List[AccountingSource]] = None,
        account_list: Optional[List[Optional[StrictStr]]] = None,
        classcode_list: Optional[List[Optional[StrictStr]]] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PeriodAmount]:
        """Get Actuals By Class And Account


        :param period_str:
        :type period_str: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param class_full_name:
        :type class_full_name: str
        :param account_full_name:
        :type account_full_name: str
        :param account_type:
        :type account_type: List[TypeOfAccount]
        :param source:
        :type source: List[AccountingSource]
        :param account_list:
        :type account_list: List[Optional[str]]
        :param classcode_list:
        :type classcode_list: List[Optional[str]]
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_serialize(
            period_str=period_str,
            start_date=start_date,
            end_date=end_date,
            class_full_name=class_full_name,
            account_full_name=account_full_name,
            account_type=account_type,
            source=source,
            account_list=account_list,
            classcode_list=classcode_list,
            skip=skip,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PeriodAmount]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_with_http_info(
        self,
        period_str: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        class_full_name: Optional[StrictStr] = None,
        account_full_name: Optional[StrictStr] = None,
        account_type: Optional[List[TypeOfAccount]] = None,
        source: Optional[List[AccountingSource]] = None,
        account_list: Optional[List[Optional[StrictStr]]] = None,
        classcode_list: Optional[List[Optional[StrictStr]]] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PeriodAmount]]:
        """Get Actuals By Class And Account


        :param period_str:
        :type period_str: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param class_full_name:
        :type class_full_name: str
        :param account_full_name:
        :type account_full_name: str
        :param account_type:
        :type account_type: List[TypeOfAccount]
        :param source:
        :type source: List[AccountingSource]
        :param account_list:
        :type account_list: List[Optional[str]]
        :param classcode_list:
        :type classcode_list: List[Optional[str]]
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_serialize(
            period_str=period_str,
            start_date=start_date,
            end_date=end_date,
            class_full_name=class_full_name,
            account_full_name=account_full_name,
            account_type=account_type,
            source=source,
            account_list=account_list,
            classcode_list=classcode_list,
            skip=skip,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PeriodAmount]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_without_preload_content(
        self,
        period_str: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        class_full_name: Optional[StrictStr] = None,
        account_full_name: Optional[StrictStr] = None,
        account_type: Optional[List[TypeOfAccount]] = None,
        source: Optional[List[AccountingSource]] = None,
        account_list: Optional[List[Optional[StrictStr]]] = None,
        classcode_list: Optional[List[Optional[StrictStr]]] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Actuals By Class And Account


        :param period_str:
        :type period_str: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param class_full_name:
        :type class_full_name: str
        :param account_full_name:
        :type account_full_name: str
        :param account_type:
        :type account_type: List[TypeOfAccount]
        :param source:
        :type source: List[AccountingSource]
        :param account_list:
        :type account_list: List[Optional[str]]
        :param classcode_list:
        :type classcode_list: List[Optional[str]]
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_serialize(
            period_str=period_str,
            start_date=start_date,
            end_date=end_date,
            class_full_name=class_full_name,
            account_full_name=account_full_name,
            account_type=account_type,
            source=source,
            account_list=account_list,
            classcode_list=classcode_list,
            skip=skip,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PeriodAmount]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_actuals_by_class_and_account_reports_get_actuals_by_class_and_account_get_serialize(
        self,
        period_str,
        start_date,
        end_date,
        class_full_name,
        account_full_name,
        account_type,
        source,
        account_list,
        classcode_list,
        skip,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'account_type': 'multi',
            'source': 'multi',
            'account_list': 'multi',
            'classcode_list': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if period_str is not None:
            
            _query_params.append(('period_str', period_str))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if class_full_name is not None:
            
            _query_params.append(('class_full_name', class_full_name))
            
        if account_full_name is not None:
            
            _query_params.append(('account_full_name', account_full_name))
            
        if account_type is not None:
            
            _query_params.append(('account_type', account_type))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if account_list is not None:
            
            _query_params.append(('account_list', account_list))
            
        if classcode_list is not None:
            
            _query_params.append(('classcode_list', classcode_list))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/get_actuals_by_class_and_account/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


