# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from finops_client.models.accounting_source import AccountingSource
from finops_client.models.read_transactions_transactions_get200_response_inner import ReadTransactionsTransactionsGet200ResponseInner
from finops_client.models.transaction_base import TransactionBase
from finops_client.models.transaction_read import TransactionRead
from finops_client.models.transaction_update import TransactionUpdate

from finops_client.api_client import ApiClient, RequestSerialized
from finops_client.api_response import ApiResponse
from finops_client.rest import RESTResponseType


class TransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_transactions_transactions_post(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Optional[str]]:
        """Create Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_transactions_transactions_post_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Optional[str]]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_transactions_transactions_post_with_http_info(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Optional[str]]]:
        """Create Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_transactions_transactions_post_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Optional[str]]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_transactions_transactions_post_without_preload_content(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_transactions_transactions_post_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Optional[str]]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_transactions_transactions_post_serialize(
        self,
        transaction_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'TransactionUpdate': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if transaction_update is not None:
            _body_params = transaction_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/transactions/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_transactions_transactions_delete_post(
        self,
        request_body: List[Optional[StrictStr]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[TransactionBase]:
        """Delete Transactions


        :param request_body: (required)
        :type request_body: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_transactions_delete_post_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_transactions_transactions_delete_post_with_http_info(
        self,
        request_body: List[Optional[StrictStr]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[TransactionBase]]:
        """Delete Transactions


        :param request_body: (required)
        :type request_body: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_transactions_delete_post_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_transactions_transactions_delete_post_without_preload_content(
        self,
        request_body: List[Optional[StrictStr]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Transactions


        :param request_body: (required)
        :type request_body: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_transactions_transactions_delete_post_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_transactions_transactions_delete_post_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'request_body': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/transactions/delete/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def read_transaction_transactions_fq_txn_link_key_get(
        self,
        fq_txn_link_key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransactionRead:
        """Read Transaction


        :param fq_txn_link_key: (required)
        :type fq_txn_link_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transaction_transactions_fq_txn_link_key_get_serialize(
            fq_txn_link_key=fq_txn_link_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionRead",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def read_transaction_transactions_fq_txn_link_key_get_with_http_info(
        self,
        fq_txn_link_key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransactionRead]:
        """Read Transaction


        :param fq_txn_link_key: (required)
        :type fq_txn_link_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transaction_transactions_fq_txn_link_key_get_serialize(
            fq_txn_link_key=fq_txn_link_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionRead",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def read_transaction_transactions_fq_txn_link_key_get_without_preload_content(
        self,
        fq_txn_link_key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Read Transaction


        :param fq_txn_link_key: (required)
        :type fq_txn_link_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transaction_transactions_fq_txn_link_key_get_serialize(
            fq_txn_link_key=fq_txn_link_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionRead",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _read_transaction_transactions_fq_txn_link_key_get_serialize(
        self,
        fq_txn_link_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if fq_txn_link_key is not None:
            _path_params['FQTxnLinkKey'] = fq_txn_link_key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions/{FQTxnLinkKey}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def read_transactions_transactions_get(
        self,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        fq_primary_key: Optional[List[StrictStr]] = None,
        txn_type: Optional[List[StrictStr]] = None,
        txn_id: Optional[List[StrictStr]] = None,
        txn_line_id: Optional[List[StrictStr]] = None,
        entity_ref_list_id: Optional[List[StrictStr]] = None,
        entity_ref_full_name: Optional[List[StrictStr]] = None,
        txn_date: Optional[List[datetime]] = None,
        account_ref_list_id: Optional[List[StrictStr]] = None,
        account_ref_full_name: Optional[List[StrictStr]] = None,
        class_ref_list_id: Optional[List[StrictStr]] = None,
        class_ref_full_name: Optional[List[StrictStr]] = None,
        ref_number: Optional[List[StrictStr]] = None,
        amount: Optional[List[Union[StrictFloat, StrictInt]]] = None,
        memo: Optional[List[StrictStr]] = None,
        fq_txn_link_key: Optional[List[StrictStr]] = None,
        fq_journal_entry_link_key: Optional[List[StrictStr]] = None,
        source: Optional[List[AccountingSource]] = None,
        db_created_by: Optional[List[StrictStr]] = None,
        date_field: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        subscriber: Optional[StrictStr] = None,
        minimal: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReadTransactionsTransactionsGet200ResponseInner]:
        """Read Transactions


        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param fq_primary_key:
        :type fq_primary_key: List[str]
        :param txn_type:
        :type txn_type: List[str]
        :param txn_id:
        :type txn_id: List[str]
        :param txn_line_id:
        :type txn_line_id: List[str]
        :param entity_ref_list_id:
        :type entity_ref_list_id: List[str]
        :param entity_ref_full_name:
        :type entity_ref_full_name: List[str]
        :param txn_date:
        :type txn_date: List[datetime]
        :param account_ref_list_id:
        :type account_ref_list_id: List[str]
        :param account_ref_full_name:
        :type account_ref_full_name: List[str]
        :param class_ref_list_id:
        :type class_ref_list_id: List[str]
        :param class_ref_full_name:
        :type class_ref_full_name: List[str]
        :param ref_number:
        :type ref_number: List[str]
        :param amount:
        :type amount: List[float]
        :param memo:
        :type memo: List[str]
        :param fq_txn_link_key:
        :type fq_txn_link_key: List[str]
        :param fq_journal_entry_link_key:
        :type fq_journal_entry_link_key: List[str]
        :param source:
        :type source: List[AccountingSource]
        :param db_created_by:
        :type db_created_by: List[str]
        :param date_field:
        :type date_field: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param subscriber:
        :type subscriber: str
        :param minimal:
        :type minimal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transactions_transactions_get_serialize(
            skip=skip,
            limit=limit,
            fq_primary_key=fq_primary_key,
            txn_type=txn_type,
            txn_id=txn_id,
            txn_line_id=txn_line_id,
            entity_ref_list_id=entity_ref_list_id,
            entity_ref_full_name=entity_ref_full_name,
            txn_date=txn_date,
            account_ref_list_id=account_ref_list_id,
            account_ref_full_name=account_ref_full_name,
            class_ref_list_id=class_ref_list_id,
            class_ref_full_name=class_ref_full_name,
            ref_number=ref_number,
            amount=amount,
            memo=memo,
            fq_txn_link_key=fq_txn_link_key,
            fq_journal_entry_link_key=fq_journal_entry_link_key,
            source=source,
            db_created_by=db_created_by,
            date_field=date_field,
            start_date=start_date,
            end_date=end_date,
            subscriber=subscriber,
            minimal=minimal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReadTransactionsTransactionsGet200ResponseInner]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def read_transactions_transactions_get_with_http_info(
        self,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        fq_primary_key: Optional[List[StrictStr]] = None,
        txn_type: Optional[List[StrictStr]] = None,
        txn_id: Optional[List[StrictStr]] = None,
        txn_line_id: Optional[List[StrictStr]] = None,
        entity_ref_list_id: Optional[List[StrictStr]] = None,
        entity_ref_full_name: Optional[List[StrictStr]] = None,
        txn_date: Optional[List[datetime]] = None,
        account_ref_list_id: Optional[List[StrictStr]] = None,
        account_ref_full_name: Optional[List[StrictStr]] = None,
        class_ref_list_id: Optional[List[StrictStr]] = None,
        class_ref_full_name: Optional[List[StrictStr]] = None,
        ref_number: Optional[List[StrictStr]] = None,
        amount: Optional[List[Union[StrictFloat, StrictInt]]] = None,
        memo: Optional[List[StrictStr]] = None,
        fq_txn_link_key: Optional[List[StrictStr]] = None,
        fq_journal_entry_link_key: Optional[List[StrictStr]] = None,
        source: Optional[List[AccountingSource]] = None,
        db_created_by: Optional[List[StrictStr]] = None,
        date_field: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        subscriber: Optional[StrictStr] = None,
        minimal: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReadTransactionsTransactionsGet200ResponseInner]]:
        """Read Transactions


        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param fq_primary_key:
        :type fq_primary_key: List[str]
        :param txn_type:
        :type txn_type: List[str]
        :param txn_id:
        :type txn_id: List[str]
        :param txn_line_id:
        :type txn_line_id: List[str]
        :param entity_ref_list_id:
        :type entity_ref_list_id: List[str]
        :param entity_ref_full_name:
        :type entity_ref_full_name: List[str]
        :param txn_date:
        :type txn_date: List[datetime]
        :param account_ref_list_id:
        :type account_ref_list_id: List[str]
        :param account_ref_full_name:
        :type account_ref_full_name: List[str]
        :param class_ref_list_id:
        :type class_ref_list_id: List[str]
        :param class_ref_full_name:
        :type class_ref_full_name: List[str]
        :param ref_number:
        :type ref_number: List[str]
        :param amount:
        :type amount: List[float]
        :param memo:
        :type memo: List[str]
        :param fq_txn_link_key:
        :type fq_txn_link_key: List[str]
        :param fq_journal_entry_link_key:
        :type fq_journal_entry_link_key: List[str]
        :param source:
        :type source: List[AccountingSource]
        :param db_created_by:
        :type db_created_by: List[str]
        :param date_field:
        :type date_field: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param subscriber:
        :type subscriber: str
        :param minimal:
        :type minimal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transactions_transactions_get_serialize(
            skip=skip,
            limit=limit,
            fq_primary_key=fq_primary_key,
            txn_type=txn_type,
            txn_id=txn_id,
            txn_line_id=txn_line_id,
            entity_ref_list_id=entity_ref_list_id,
            entity_ref_full_name=entity_ref_full_name,
            txn_date=txn_date,
            account_ref_list_id=account_ref_list_id,
            account_ref_full_name=account_ref_full_name,
            class_ref_list_id=class_ref_list_id,
            class_ref_full_name=class_ref_full_name,
            ref_number=ref_number,
            amount=amount,
            memo=memo,
            fq_txn_link_key=fq_txn_link_key,
            fq_journal_entry_link_key=fq_journal_entry_link_key,
            source=source,
            db_created_by=db_created_by,
            date_field=date_field,
            start_date=start_date,
            end_date=end_date,
            subscriber=subscriber,
            minimal=minimal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReadTransactionsTransactionsGet200ResponseInner]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def read_transactions_transactions_get_without_preload_content(
        self,
        skip: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        fq_primary_key: Optional[List[StrictStr]] = None,
        txn_type: Optional[List[StrictStr]] = None,
        txn_id: Optional[List[StrictStr]] = None,
        txn_line_id: Optional[List[StrictStr]] = None,
        entity_ref_list_id: Optional[List[StrictStr]] = None,
        entity_ref_full_name: Optional[List[StrictStr]] = None,
        txn_date: Optional[List[datetime]] = None,
        account_ref_list_id: Optional[List[StrictStr]] = None,
        account_ref_full_name: Optional[List[StrictStr]] = None,
        class_ref_list_id: Optional[List[StrictStr]] = None,
        class_ref_full_name: Optional[List[StrictStr]] = None,
        ref_number: Optional[List[StrictStr]] = None,
        amount: Optional[List[Union[StrictFloat, StrictInt]]] = None,
        memo: Optional[List[StrictStr]] = None,
        fq_txn_link_key: Optional[List[StrictStr]] = None,
        fq_journal_entry_link_key: Optional[List[StrictStr]] = None,
        source: Optional[List[AccountingSource]] = None,
        db_created_by: Optional[List[StrictStr]] = None,
        date_field: Optional[StrictStr] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        subscriber: Optional[StrictStr] = None,
        minimal: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Read Transactions


        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param fq_primary_key:
        :type fq_primary_key: List[str]
        :param txn_type:
        :type txn_type: List[str]
        :param txn_id:
        :type txn_id: List[str]
        :param txn_line_id:
        :type txn_line_id: List[str]
        :param entity_ref_list_id:
        :type entity_ref_list_id: List[str]
        :param entity_ref_full_name:
        :type entity_ref_full_name: List[str]
        :param txn_date:
        :type txn_date: List[datetime]
        :param account_ref_list_id:
        :type account_ref_list_id: List[str]
        :param account_ref_full_name:
        :type account_ref_full_name: List[str]
        :param class_ref_list_id:
        :type class_ref_list_id: List[str]
        :param class_ref_full_name:
        :type class_ref_full_name: List[str]
        :param ref_number:
        :type ref_number: List[str]
        :param amount:
        :type amount: List[float]
        :param memo:
        :type memo: List[str]
        :param fq_txn_link_key:
        :type fq_txn_link_key: List[str]
        :param fq_journal_entry_link_key:
        :type fq_journal_entry_link_key: List[str]
        :param source:
        :type source: List[AccountingSource]
        :param db_created_by:
        :type db_created_by: List[str]
        :param date_field:
        :type date_field: str
        :param start_date:
        :type start_date: datetime
        :param end_date:
        :type end_date: datetime
        :param subscriber:
        :type subscriber: str
        :param minimal:
        :type minimal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._read_transactions_transactions_get_serialize(
            skip=skip,
            limit=limit,
            fq_primary_key=fq_primary_key,
            txn_type=txn_type,
            txn_id=txn_id,
            txn_line_id=txn_line_id,
            entity_ref_list_id=entity_ref_list_id,
            entity_ref_full_name=entity_ref_full_name,
            txn_date=txn_date,
            account_ref_list_id=account_ref_list_id,
            account_ref_full_name=account_ref_full_name,
            class_ref_list_id=class_ref_list_id,
            class_ref_full_name=class_ref_full_name,
            ref_number=ref_number,
            amount=amount,
            memo=memo,
            fq_txn_link_key=fq_txn_link_key,
            fq_journal_entry_link_key=fq_journal_entry_link_key,
            source=source,
            db_created_by=db_created_by,
            date_field=date_field,
            start_date=start_date,
            end_date=end_date,
            subscriber=subscriber,
            minimal=minimal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReadTransactionsTransactionsGet200ResponseInner]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _read_transactions_transactions_get_serialize(
        self,
        skip,
        limit,
        fq_primary_key,
        txn_type,
        txn_id,
        txn_line_id,
        entity_ref_list_id,
        entity_ref_full_name,
        txn_date,
        account_ref_list_id,
        account_ref_full_name,
        class_ref_list_id,
        class_ref_full_name,
        ref_number,
        amount,
        memo,
        fq_txn_link_key,
        fq_journal_entry_link_key,
        source,
        db_created_by,
        date_field,
        start_date,
        end_date,
        subscriber,
        minimal,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'FQPrimaryKey': 'multi',
            'TxnType': 'multi',
            'TxnID': 'multi',
            'TxnLineID': 'multi',
            'EntityRefListID': 'multi',
            'EntityRefFullName': 'multi',
            'TxnDate': 'multi',
            'AccountRefListID': 'multi',
            'AccountRefFullName': 'multi',
            'ClassRefListID': 'multi',
            'ClassRefFullName': 'multi',
            'RefNumber': 'multi',
            'Amount': 'multi',
            'Memo': 'multi',
            'FQTxnLinkKey': 'multi',
            'FQJournalEntryLinkKey': 'multi',
            'Source': 'multi',
            'DbCreatedBy': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if fq_primary_key is not None:
            
            _query_params.append(('FQPrimaryKey', fq_primary_key))
            
        if txn_type is not None:
            
            _query_params.append(('TxnType', txn_type))
            
        if txn_id is not None:
            
            _query_params.append(('TxnID', txn_id))
            
        if txn_line_id is not None:
            
            _query_params.append(('TxnLineID', txn_line_id))
            
        if entity_ref_list_id is not None:
            
            _query_params.append(('EntityRefListID', entity_ref_list_id))
            
        if entity_ref_full_name is not None:
            
            _query_params.append(('EntityRefFullName', entity_ref_full_name))
            
        if txn_date is not None:
            
            _query_params.append(('TxnDate', txn_date))
            
        if account_ref_list_id is not None:
            
            _query_params.append(('AccountRefListID', account_ref_list_id))
            
        if account_ref_full_name is not None:
            
            _query_params.append(('AccountRefFullName', account_ref_full_name))
            
        if class_ref_list_id is not None:
            
            _query_params.append(('ClassRefListID', class_ref_list_id))
            
        if class_ref_full_name is not None:
            
            _query_params.append(('ClassRefFullName', class_ref_full_name))
            
        if ref_number is not None:
            
            _query_params.append(('RefNumber', ref_number))
            
        if amount is not None:
            
            _query_params.append(('Amount', amount))
            
        if memo is not None:
            
            _query_params.append(('Memo', memo))
            
        if fq_txn_link_key is not None:
            
            _query_params.append(('FQTxnLinkKey', fq_txn_link_key))
            
        if fq_journal_entry_link_key is not None:
            
            _query_params.append(('FQJournalEntryLinkKey', fq_journal_entry_link_key))
            
        if source is not None:
            
            _query_params.append(('Source', source))
            
        if db_created_by is not None:
            
            _query_params.append(('DbCreatedBy', db_created_by))
            
        if date_field is not None:
            
            _query_params.append(('date_field', date_field))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if subscriber is not None:
            
            _query_params.append(('subscriber', subscriber))
            
        if minimal is not None:
            
            _query_params.append(('minimal', minimal))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/transactions/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_transactions_transactions_patch(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[TransactionBase]:
        """Update Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_transactions_transactions_patch_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_transactions_transactions_patch_with_http_info(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[TransactionBase]]:
        """Update Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_transactions_transactions_patch_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_transactions_transactions_patch_without_preload_content(
        self,
        transaction_update: List[TransactionUpdate],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Transactions


        :param transaction_update: (required)
        :type transaction_update: List[TransactionUpdate]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_transactions_transactions_patch_serialize(
            transaction_update=transaction_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TransactionBase]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_transactions_transactions_patch_serialize(
        self,
        transaction_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'TransactionUpdate': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if transaction_update is not None:
            _body_params = transaction_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/transactions/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


